git --help	Показывает имеющиеся комады

git config --list	Список наших конфигураций.(user.name, user.email и т.д....)

git config --global --list 	Глобальные настройки

git config --global user.name 'Новое_имя'	Позволяе изменить(присвоеть) новое имя
git config --global user.email 'Новое_имя'	Позволяе изменить(присвоеть) новый email

/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
				ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ GIT
1) git init

2) git status
				ИГНОРИРОВАТЬ ФАЙЛ
Создадим файл .gitignore и напишем в нем путь к файлу который мы хотим проигнорировать. Например так: /tmp и папка tmp не будет попадать в репозиторий

3) git add name_file

4) git commit -m 'First commit'
   git commit -a -m 'Commit'	Одновременно добавляем и комментирует
   
5) git log 	Просмотрим действительно ли наш коммит был добавлен.(инфа о коммите)
   git log -p	Покажет что именно изменилось
   
6) git reset HEAD index.html
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/

					УДАЛЕННЫЙ РЕПОЗИТОРИЙ 
У меня есть проект на моем локальном компьютере и его нужно залить на gitHub, просто пишу команду в консоли:

1) git remote add origin https://github.com/ratov/git_test.git
2) git push -u origin master	Протолкнем наши изменения в origin из ветки master

   -u 	Говорит на о том, что в следующий раз когда мы будем выполнять команды git push нам не нужно будет вводить вот эти параметры: -u origin master. Мы просто напишем git push.

3) В следующий раз когда буду пушить, ссылку и origin вводить не надо, просто вот такой коммандой:
git push
   
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/

						АЛГОРИТМ ПОВСЕДНЕВНОЙ РАБОТЫ С GITHUB
1) Проиндексировать (git add .)
2) Закомитить	(git commit -m "comment")
3) и отправить на удаленный репозиторий (запушить)
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/

					ИЗ УДАЛЕННОГО РЕПОЗИТОРИЯ СЕБЕ НА КОМПЬЮТЕР

У себя на компе создаю директорию, но в ней git init не выполняю(не обязательно). Далее иду на giHub и от туда копирую ссылку и в консоле пишу ее:

git clone https://github.com/ratov/git_test.git и все!
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/

								ВЕТКИ И СЛИЯНИЯ

git branch 		Просмотр состояние веток(на какой ветке находимся)  

Создаем новую ветку(2 способа):

1) git branch имя_ветки

   теперь переходим на новую ветку:
   
   git checkout имя_ветки
   
								СЛИЯНИЕ ВЕТОК  
								
Переходим на главную ветку master и пишем:

git merge имя_ветки(с которой хотим слияться)

Если будет конфликт, то git сделает в нашем файле примерно такую метку:
<<<<<<< HEAD
	Master
=======
	Branche2
>>>>>>> branche2

Мы из этого делаем что-то вроде этого:

Master & Branche2

Теперь мы должны это все Закомитить!!!!!!
-----------------------------------------------------------------------
Чтобы удалить ветку, пишем:

git branch -d имя_ветки.	(Для этого нужно выйти с этой ветки)

					СОЗДАЕМ ВЕТКУ И СРАЗУ НА НЕЁ ПЕРЕХОДИМ(быстрый способ)
					
git checkout -b имя_ветки	
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
							ПОЛЕЗНЫЕ КОМАДЫ
git remote -v 		Позволяет увидить какие мы задавали имена в комманде git remote origin ......
 
ПОЛУЧИТЬ ИЗ ГИТХАБА РЕПОЗИТОРИЙ НА СВОЙ ЛОКАЛЬНЫЙ КОМП

Если кратко, на Github'е создаем репозиторий, ставим чекбокс readme, потом копируем от туда ссылочку, заходим через консоль на наш локальный репозиторий(в нашу папку) и прописываем команду:
git clone https://github.com/ratov/git-test.git имя_папки

Далее можем посмотреть что там командой:
git remote -v
по умолчанию репозитории называются origin

								ОТПРАВИТЬ ИЗ ЛОГАЛЬНОГО РЕПОЗИТОРИЯ НА ГИТХАБ
Мы все не забываем коммитить на локалке, после изменений и пишем команду находясь из консоли в нашем локальном репозитории:
git push - Возможно попросить пароль, логин от гитхаба... и проект улетить в ГИТХАБ
---------------------------------------------------------------------------------------

Если у нас на ГИТХАБЕ создался файл и был закомичен, то как в нашем репозитории в консоли узнать эти изменения? Если мы введем команду:
git log
..то у нас не отобразятся изменения сделаные на гитхабе..
Теперь чтобы получить с гитхаба с удаленного репозитория появившиеся там коммиты которых нет еще здесь, для этого исп. команда:
git pull - Вытянит изменения из удаленного репозитория к нам на консоль
...и теперь мы пропишем:
git log - и получим все изменения...

					ПОДВОДЯ КОРОТКИ ИТОГ:
					
git pull - достает изменения с удаленного репозитория и пытается применить их к нашему. Инача говорят еще "влить удаленную ветку в локальную"

git push - это обратная технология, это отправка наших наборов изменений на удаленный репозиторий 
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/   
Создание новой Ветки:
git branch testing , где testing имя ветки
Эта команда ветку только создаёт, но не переключает.
-------------------------------------------------------
Чтобы переключится на новую ветку:
HEAD - это указатель на текущую ветку и коммит. Указатель на текущее состояние репозитория
git checkout testing это мы переключились на новую ветку. HEAD теперь указывает на ветку testing
-----------------------------------------------------------
Пояснение
Если мы сделали изменения в ветке master потом переключились на ветку testing и сделали изменения и в этой ветке, сделали команду git log будет два коммита.... Но если мы переключемся обратно на ветку master то изменения в файле которые я вносил в ветке testing вернутся в иходное положение ветки master
--------------------------------------------------------------------
Ветка это указатель на коммит
git checkout -b Одновременно создает ветку и переключается на нее
----------------------------------------------------------------------------

							СЛИЯНИЕ ВЕТОК

git branch -d имя_ветки #удалит ветку

Допустим мы находимся на ветке мастер, и от нее нам нужно срочно создать ветку, назовем ее hotfix, чтобы внести изменения. И все что нами было наработано остается в ветке мастер и мы делаем новую ветку:
git branch hotfix
git checkout hotfix
Сделали новую ветку и переключились на нее. Сделали в файлах изменения, что-то добавили... Ввели команду git status, увидели....
Далее git add... git commit... Проверили git log

Теперь нам нужно готовую ветку hotfix влить в нашу основную ветку master, и я такой - нет никаких проблем:
Переходим на нашу ветку master git checkout master...
смотрим git log... и
git merge hotfix #эта команда значит - возьми все изменения в ветке hotfix и попытайся ее к мастеру применить
------------------------------------------------------------
Как проверить какие вообще ветки существуют?
git branch -v
-----------------------------------------------------------  
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
									КОМАДЫ
git log 	#история коммитов
git log --stat	#покажит нам более детальные изменения
git log --pretty=format:""	#показывает какую-то инфу о логах, об истории в нужном сформатированном виде. В кавычках существует множество команд, некоторые рассмотрим:
git log --pretty=format:"%an"	#показывает какой автор вносил изменения(выведит мое имя)
git log --pretty=format:"%an - %cn"	#показывает создателя версии(выведит мое имя)
git log --pretty=format:"%an - %cn - %H"	#показывает хэш нашего действия
git log --pretty=format:"%an - %cn - %ce"	#показывает электронную почту создателя изменений
git log --pretty=format:"%an - %s"	#показывает комментарий внесенных изменений
git log --pretty=format:"%ad"	#показывает время создания тех или иных файлов

								Создание тэгов
????????????????????????????????????????????????????????

									Ветки
Каждая ветка - это попытка решить какую-то определенную задачау

git branch mybranch		#создал ветку mybranch
git log --oneline --decorate	#показывает на какой ветке нахожусь
git checkout mybranch	#переключает на ветку mybranch
git log --oneline --decorate	#покажет, что указатель указывает на mybranch
git commit -a -m "comment"		#одновременно добавляет и коммитет

git log --oneline --decorate --graph --all		#покажет подробные изменения со всеми ветками

git checkout -b mybranch2		#создать ветку и сразу переключиться в неё

								Слияние веток

Например. Мы вели коммиты в ветке мастер, потом создали другую ветку "ветка2" и там работаем, комитим. И чтобы перенести из "ветка2" изменения в ветку мастер, мы переходим в ветку мастер и пишем команду:
git merge ветка2	#и все что было в "ветка2" зальётся в мастер
git branch -d ветка2	#удалит ветка
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
								УДАЛЕННЫЙ РЕПОЗИТОРИЙ
Удалить старый репозеторий:
rm -rf 
Создать репозиторий:
mkdir имя_папки
---------------------------------------------------------------
Для работы с удаленными репозиториями у нас есть команда remote
Например мы создали репозиторий на диски С C:\git-tmp\repo, а наш проект находится на диски Е по такому адресу E:\repos\site.local. (ТУТ НУЖНО ПОМНИТЬ, ЧТО И В ЛОКАЛЬНОМ И В УДАЛЕННОМ РЕПОЗИТОРИИ ВСЕ ДОЛЖНО БЫТЬ ЗАИНИЧИНО "git init" И ДОЛЖНО БЫТЬ ВСЕ git add и git commitn -m "..." ЭТО ВАЖНО, ИНАЧА РАБОТАТЬ НЕ БУДЕТ)
Мы на диске С сделаем команду:
git init
И чтобы нам на этот диск С загрузить проект с диска Е, нам нужно прописать таку команду:
git remote add php2 "E:\repos\site.local", где php2 - это мы даем имя нашему репозиторию на диске Е
т.е. git удаленный(remote) добавь(add) и назови его php2 ссылка...

Далее.. команда git remote покажет нам список прикрепленных к нашему репозиторию удаленных и прикрепленных к нему, в моем случае имя php2
git remote -v вывод будет подробней
git remote show имя_репозитория

Далее есть замечательная команда
git fetch имя_удаленного_репозитория (в нашем случае php2) - эта команда возмет информацию обо всех изменениях в удаленном репозитории и перетащит к нам. ТОЛЬКО ИНФОРМАЦИЮ, А НЕ САМИ ФАЙЛЫ (СПИСОК ЧЕГО-ТО..)

Далее идет команда 
git checkout --track имя_репозитория/master
Эта команда говорит нам: Git создай нам связь текущей ветки с веточкой master в репозитории php2

Далее команда:
git pull - после этого удаленный репозиторий зальётся к нам в локальный репозиторий
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
										УСТАНОВКА GIT
https://git-for-windows.github.io
Чтобы в bush из рабочего стола или из другого места перейти на диск С, пишем:
cd /c/

далее, чтобы зайти в папку git-tmp которая находится на диске С, пишем:
cd git-tmp и мы там...

pwd - команда, кот. распечатывает полный путь до папки в кот. находимся

ТЕПЕРЬ ДВЕ ГЛАВНЫЕ ПЕРВОНАЧАЛЬНЫЕ НАСТРОЙКИ, КОТОРЫЕ НУЖНО СДЕЛАТЬ ОДИН РАЗ В НАЧАЛЕ:

здесь имя произвольно (Kirill Ratov)
git config --global user.name "Kirill Ratov"

теперь прописываем email:
git config --global user.email "ratovkirill@gmail.com"
-----------------------------------------------------------------------------


Далее команда которая создает репозиторий (делается в папке с нашим проектом)
git init (ls -a показывает путь)
-------------------------------------------------------------------------

ФИКСАЦИЯ ИЗМЕНЕНИЙ
git add название_файла

git commit -m "comment"

git commit нужно использовать с флагом -m, если без него, то попаду в странное место)), чтобы от туда выйти нужно нажать комбинацию клавишь Esc->:->q->?->Enter
------------------------------------------------------------------------------

В Git файлы могут находится в одном из четырех состояниях:
1. Это неотслеживаемый файл (Untracked)
2. Это файл подготовленный для фиксации изменения (Staged, это красная зона)
3. Это файл с последней фиксацией не менялся (Unmodified, это зеленая зона)
4. Это когда файл у нас был в истории, git о нем знает, он участвовал в комитах и мы его сейчас поменяли. И тепер у нас два варианта или в Staged его перевести и потом зафиксировать либо отменить те изменения которые мы вносили и сделать его снова Unmodified (Modified - это желтая зона)
----------------------------------------------------------------------------
git log - это логи всех изменений

git log -p - подробная информация про коммиты
--------------------------------------------------------------------------
ОТКАТИТСЯ НАЗАД
Если мы случайно удалили файл, или сделали поправки внетри файла, мы можем откатится на исходное положение:
git status - нам покажет что мы удалили и изменили файл
потом нам нужно добавить удаленный и измененный файл:
git add file_name1.txt file_name2.txt
Снова проверяем git status...
И теперь выполняем Основную команду:
git reset HEAD
Далее снова проверяем git status
И чтобы вернуть все вайла к первоначальному истоку, пишем команду:
git checkout -- file_name1.txt
git checkout -- file_name2.txt
И снова проверяем git status 
------------------------------------------------------------------------------
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/
/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
/************************************************************************************/  